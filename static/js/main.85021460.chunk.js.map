{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","store/action.ts","store/selectors.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","store/index.ts","index.tsx"],"names":["API_URL","getAllTodos","a","fetch","response","json","getUserById","userId","SeeFiltered","remove","id","method","SET_TODOS","ADD_TODOS","SET_USER","setUserAction","payload","type","getTodosSelector","state","todos","getUsersSelector","user","TodoList","dispatch","useDispatch","useSelector","useState","filter","setFilter","selectFilter","setSelectFilter","filteredByTitle","todo","completed","active","all","title","includes","loadTodosFromServer","todosFromServer","useEffect","getUser","userFromServ","console","log","deleteTodo","className","value","onChange","event","target","map","classNames","checked","readOnly","onClick","CurrentUser","name","email","phone","App","initialState","store","createStore","action","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.85021460.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport async function getAllTodos(): Promise<Todo[]> {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n}\n\nexport async function getUserById(userId: number): Promise<User> {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n}\n\nexport const remove = async (id: number) => {\n  const response = await fetch(`${API_URL}/todos/${id}`, { method: 'DELETE' });\n\n  return response;\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAllTodos, getUserById, remove } from '../../api/api';\nimport { setTodosAction, setUserAction } from '../../store/action';\nimport { getTodosSelector, getUsersSelector } from '../../store/selectors';\nimport './TodoList.scss';\n\nenum SeeFiltered {\n  all = 'all',\n  completed = 'completed',\n  active = 'active',\n}\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodosSelector);\n  const user = useSelector(getUsersSelector);\n\n  const [filter, setFilter] = useState('');\n  const [selectFilter, setSelectFilter] = useState('all');\n\n  const filteredByState\n    = todos.filter(todo => {\n      if (todo.completed === true && selectFilter === SeeFiltered.completed) {\n        return true;\n      }\n\n      if (todo.completed === false && selectFilter === SeeFiltered.active) {\n        return true;\n      }\n\n      if (selectFilter === SeeFiltered.all) {\n        return true;\n      }\n\n      return false;\n    });\n\n  const filteredByTitle\n    = filteredByState.filter(todo => todo.title.includes(filter));\n\n  const loadTodosFromServer = async () => {\n    const todosFromServer = await getAllTodos();\n\n    dispatch(setTodosAction(todosFromServer));\n  };\n\n  useEffect(() => {\n    loadTodosFromServer();\n  }, []);\n\n  const getUser = async (id: number) => {\n    try {\n      const userFromServ = await getUserById(id);\n\n      dispatch(setUserAction(userFromServ));\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  };\n\n  const deleteTodo = async (id: number) => {\n    await remove(id);\n    await loadTodosFromServer();\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        className=\"input\"\n        type=\"text\"\n        data-cy=\"filterByTitle\"\n        value={filter}\n        onChange={event => {\n          setFilter(event.target.value);\n        }}\n      />\n\n      <div className=\"select\">\n        <select\n          value={selectFilter}\n          onChange={event => {\n            setSelectFilter(event.target.value);\n          }}\n        >\n          <option value=\"all\">all</option>\n          <option value=\"active\">active</option>\n          <option value=\"completed\">completed</option>\n        </select>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul\n          className=\"TodoList__list\"\n          data-cy=\"listOfTodos\"\n        >\n          {filteredByTitle.map(todo => (\n            <li\n              className={classNames('TodoList__item', {\n                'TodoList__item--checked': todo.completed,\n                'TodoList__item--unchecked': !todo.completed,\n              })}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <div>\n                <button\n                  className={`TodoList__user-button button mgr-small ${user?.id === todo.userId && 'TodoList__user-button--selected'}`}\n                  data-cy=\"userButton\"\n                  type=\"button\"\n                  onClick={() => {\n                    getUser(todo.userId);\n                  }}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n\n                <button\n                  className=\"TodoList__user-button button is-danger\"\n                  data-cy=\"userButton\"\n                  type=\"button\"\n                  onClick={() => {\n                    deleteTodo(todo.id);\n                  }}\n                >\n                  X\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { Action, Todo, User } from '../react-app-env';\n\nexport const SET_TODOS = 'SET_TODOS';\nexport const ADD_TODOS = 'ADD_TODOS';\nexport const SET_USER = 'ADD_USER';\n\nexport const setTodosAction = (payload: Todo[]): Action => ({\n  type: SET_TODOS,\n  payload,\n});\n\nexport const addTodosAction = (payload: Todo): Action => ({\n  type: ADD_TODOS,\n  payload,\n});\n\nexport const setUserAction = (payload: User | null): Action => ({\n  type: SET_USER,\n  payload,\n});\n","import { State } from '../react-app-env';\n\nexport const getTodosSelector = (state: State) => state.todos;\nexport const getUsersSelector = (state: State) => state.user;\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUsersSelector } from '../../store/selectors';\nimport { setUserAction } from '../../store/action';\n\nexport const CurrentUser: React.FC = () => {\n  const user = useSelector(getUsersSelector);\n  const dispatch = useDispatch();\n\n  if (!user) {\n    return <p>No selected user</p>;\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      <button\n        className=\"\n              TodoList__user-button\n              TodoList__user-button--red\n              button\n            \"\n        type=\"button\"\n        onClick={() => {\n          dispatch(setUserAction(null));\n        }}\n      >\n        clear\n      </button>\n\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${user.id}`}</span>\n      </h2>\n\n      <h3\n        className=\"CurrentUser__name\"\n        data-cy=\"userName\"\n      >\n        {user.name}\n      </h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore } from 'redux';\nimport { Action, State } from '../react-app-env';\nimport { ADD_TODOS, SET_USER, SET_TODOS } from './action';\n\nconst initialState: State = {\n  todos: [],\n  user: null,\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n    case ADD_TODOS:\n      return {\n        ...state,\n        todos: [...state.todos, action.payload],\n      };\n    case SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}